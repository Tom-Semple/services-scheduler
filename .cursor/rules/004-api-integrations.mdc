---
description: External API patterns and MCP server integration
globs: "src/services/**/*.{ts,tsx}"
---

# API Integration Standards with MCP

## Supabase MCP Server
Use the connected Supabase MCP server as the primary database interface. Leverage execute_sql for queries, apply_migration for schema changes, and generate_typescript_types for type definitions. The MCP server handles authentication and connection management automatically.

## Database Operations via MCP
Create service functions that wrap MCP server tools for database operations. Use execute_sql tool for data queries and modifications. Handle MCP server responses and errors appropriately with proper logging and user feedback.

## Twilio SMS Service
Create sendJobNotification function that formats job details into concise SMS messages. Include job type, customer name, date/time, required equipment list, and unique job detail link. Handle SMS failures gracefully with error logging and user notifications.

## Weather API Integration
Keep weather checks simple - focus on rain percentage and temperature only. Check weather for scheduled job dates. Provide weather warnings for outdoor work. Use environment variable for API key.

## CalDAV Integration  
Implement direct calendar sync to contractor calendar applications. Create calendar events with job title, customer details, property address, and unique job information links.

## MCP Server Tools Usage
Always prefer MCP server tools over direct API calls for Supabase operations. Use list_tables to understand schema, execute_sql for queries, and apply_migration for changes. Generate fresh TypeScript types after schema modifications.

## Error Handling Standards
Wrap all API calls including MCP server tools in try-catch blocks. Log detailed errors to console for debugging. Show user-friendly error messages to users. Implement retry logic for transient failures where appropriate.

## Service Architecture
Create separate service modules for different integrations: database (MCP), SMS (Twilio), weather, and calendar. Each service should handle its own error cases and provide consistent interfaces to components.
